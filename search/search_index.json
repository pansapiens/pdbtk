{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pdbtk","text":"<p>A simple PDB structure file manipulation toolkit (in the spirit of <code>seqtk</code>, <code>seqkit</code>, <code>csvtk</code>).</p> <p><code>pdbtk</code> (currently) strives to be practical over 100% standards compliant.</p> <p>Docs: https://pansapiens.github.io/pdbtk/</p>"},{"location":"#examples","title":"Examples","text":"<pre><code># Extract chains from a PDB file\npdbtk extract --chains A,B,C --output 1a02_chainABC.pdb 1a02.pdb\n\n# Extract chains to stdout\npdbtk extract --chains A,B,C 1a02.pdb &gt;1a02_chainABC.pdb\n\n# Extract sequences from a PDB file (one record per chain)\npdbtk extract-seq 1a02.pdb &gt;1a02.fasta\n\n# Extract sequences for specific chains\npdbtk extract-seq --chains A,B,C 1a02.pdb &gt;1a02_chainABC.fasta\n</code></pre>"},{"location":"#building","title":"Building","text":"<pre><code>go build -o bin/pdbtk .\n\n# or\n# make build\n</code></pre>"},{"location":"#building-the-documentation","title":"Building the documentation","text":"<pre><code>cd doc\nuv venv\nsource .venv/bin/activate\nuv pip install mkdocs mkdocs-material mkdocs-macros-plugin\n\n# To view locally\n# mkdocs serve\n\nmkdocs build\n</code></pre>"},{"location":"download/","title":"Download","text":""},{"location":"download/#binary-releases","title":"Binary Releases","text":"OS Arch Binary Size Linux amd64 pdbtk-linux-amd64 ~2.5MB Linux arm64 pdbtk-linux-arm64 ~2.4MB macOS amd64 pdbtk-darwin-amd64 ~2.6MB macOS arm64 pdbtk-darwin-arm64 ~2.5MB Windows amd64 pdbtk-windows-amd64.exe ~2.7MB"},{"location":"download/#installation","title":"Installation","text":""},{"location":"download/#user-space-installation","title":"User-space Installation","text":""},{"location":"download/#linux-macos","title":"Linux / macOS","text":"<p>1 - Download the appropriate binary and make it executable</p> <pre><code># Using ~/.local/bin (you could also just use ~/bin if you prefer)\nmkdir -p ~/.local/bin\n\n# Download the Linux binary to your user bin directory\nwget -O ~/.local/bin/pdbtk https://github.com/pansapiens/pdbtk/releases/download/v0.1/pdbtk-linux-amd64\n\n# Or for macOS, use:\n# curl -L -o ~/.local/bin/pdbtk https://github.com/pansapiens/pdbtk/releases/download/v0.1/pdbtk-darwin-amd64\n\n# Make it executable\nchmod +x ~/.local/bin/pdbtk\n</code></pre> <p>2 - Ensure the <code>~/.local/bin</code> directory is on your <code>PATH</code> by adding one of these lines to your shell configuration file:</p> <p>For <code>~/.bashrc</code>:</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre> <p>For <code>~/.zshrc</code>:</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre> <p>3 - Reload your shell configuration:</p> <pre><code>source ~/.bashrc\n# or\nsource ~/.zshrc\n</code></pre>"},{"location":"download/#windows","title":"Windows","text":"<ol> <li>Download the Windows binary from the table above</li> <li>Move <code>pdbtk-windows-amd64.exe</code> to a directory in your PATH (e.g., <code>C:\\Users\\YourName\\bin</code>)</li> <li>Rename it to <code>pdbtk.exe</code> for easier use</li> <li>Add the directory to your PATH environment variable through System Properties</li> </ol>"},{"location":"download/#shell-completion","title":"Shell Completion","text":"<p>After installation, you can enable shell completion for better user experience:</p>"},{"location":"download/#bash","title":"Bash","text":"<pre><code># Generate completion script\nmkdir -p ~/.local/share/bash-completion/completions\npdbtk completion bash &gt; ~/.local/share/bash-completion/completions/pdbtk\n</code></pre>"},{"location":"download/#zsh","title":"Zsh","text":"<pre><code># Generate completion script\nmkdir -p ~/.zsh/completion\npdbtk completion zsh &gt; ~/.zsh/completion/_pdbtk\n\n# Add to your ~/.zshrc if not already present:\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit &amp;&amp; compinit\n</code></pre>"},{"location":"download/#fish","title":"Fish","text":"<pre><code># Generate completion script\nmkdir -p ~/.config/fish/completions\npdbtk completion fish &gt; ~/.config/fish/completions/pdbtk.fish\n</code></pre>"},{"location":"download/#verify-installation","title":"Verify Installation","text":"<p>Test that pdbtk is properly installed:</p> <pre><code>pdbtk --help\n</code></pre> <p>You should see the help output for pdbtk.</p>"},{"location":"download/#building-from-source","title":"Building from Source","text":"<p>If you prefer to build from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/pansapiens/pdbtk.git\ncd pdbtk\n\n# Build the binary\ngo build -o bin/pdbtk .\n\n# Or use the Makefile\nmake build\n</code></pre>"},{"location":"download/#requirements","title":"Requirements","text":"<ul> <li>No external dependencies required</li> <li>Single binary executable</li> </ul>"},{"location":"usage/","title":"Usage and Examples","text":""},{"location":"usage/#quick-guide","title":"Quick Guide","text":"<ul> <li>Download PDB files: get</li> <li>Coordinate extraction: extract</li> <li>Sequence extraction: extract-seq</li> <li>Chain manipulation: rename-chain, renumber-residues</li> <li>Version info: version</li> <li>Other: completion</li> </ul>"},{"location":"usage/#pdbtk-usage","title":"pdbtk Usage","text":"<pre><code>pdbtk -- a cross-platform, efficient and practical PDB structure file manipulation toolkit\n\nVersion: 0.1.1\nAuthor: Perry\nSource code: https://github.com/perry/pdbtk\n\npdbtk is a command-line toolkit for manipulating PDB structure files.\nIt provides various operations for extracting, filtering, and transforming protein structure data.\n\nUsage:\n  pdbtk [command]\n\nAvailable Commands:\n  get               Download a PDB file from the RCSB PDB database\n  extract           Extract chains from a PDB file\n  extract-seq       Extract sequences from chains in a PDB file\n  rename-chain      Rename a chain in a PDB file\n  renumber-residues Renumber residues in a PDB file\n  version           Print the version number\n  completion        Generate the autocompletion script for the specified shell\n  help              Help about any command\n\nFlags:\n  -h, --help   help for pdbtk\n\nUse \"pdbtk [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/#get-usage","title":"get Usage","text":"<pre><code>Download a PDB file from the RCSB PDB database using the PDB code.\nThe file will be downloaded from https://files.rcsb.org/download/{pdb_code}.{format}\n\nBy default, the file is saved as {pdb_code}.pdb in the current directory.\nUse --output to specify a different filename or \"-\" to output to stdout.\nUse --format to specify the file format (pdb, pdb.gz).\n\nUsage:\n  pdbtk get [flags] &lt;pdb_code&gt;\n\nFlags:\n  -f, --format string   File format: pdb, pdb.gz (default: pdb)\n  -h, --help            help for get\n  -o, --output string   Output file (default: {pdb_code}.{format}, use '-' for stdout)\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":"<p>Download 1A02 as PDB file</p> <pre><code>$ pdbtk get 1A02\n</code></pre> <p>Download as compressed PDB file</p> <pre><code>$ pdbtk get --format pdb.gz 1A02\n</code></pre> <p>Download to stdout and view the first 10 line with <code>head</code></p> <pre><code>$ pdbtk get --output - 1A02 | head\n</code></pre> <p>Download to specific filename</p> <pre><code>$ pdbtk get --output my_structure.pdb 1A02\n</code></pre> <p>Download the gzipped PDB, uncompress it and extract chain B in a single command</p> <pre><code>$ pdbtk get --format pdb.gz -o - 1A02 | gunzip -c - | pdbtk extract --chains B\n</code></pre>"},{"location":"usage/#extract-usage","title":"extract Usage","text":"<pre><code>Extract specific chains from a PDB structure file.\nThe output can be written to a file or stdout (if no output file is specified).\nIf no input file is specified, reads from stdin.\n\nUsage:\n  pdbtk extract [flags] [input_file]\n\nFlags:\n  -c, --chains string   Comma-separated list of chain IDs to extract (required)\n      --chain string    Alias for --chains\n  -h, --help            help for extract\n  -o, --output string   Output file (default: stdout)\n      --altloc string   Filter by alternative location (ALTLOC) identifier (e.g., A, B) or 'first' to take first ALTLOC when duplicates exist\n</code></pre>"},{"location":"usage/#examples_1","title":"Examples","text":"<ol> <li>Extract chains A, B, and C to a file</li> </ol> <pre><code>$ pdbtk extract --chains A,B,C --output 1a02_chainABC.pdb 1a02.pdb\n</code></pre> <ol> <li>Extract chains A, B, and C to stdout</li> </ol> <pre><code>$ pdbtk extract --chains A,B,C 1a02.pdb &gt; 1a02_chainABC.pdb\n</code></pre> <ol> <li>Extract from stdin</li> </ol> <pre><code>$ cat 1a02.pdb | pdbtk extract --chains A,B,C\n</code></pre> <ol> <li>Extract only ALTLOC B atoms</li> </ol> <pre><code>$ pdbtk extract --chains A --altloc B 1a02.pdb\n</code></pre> <ol> <li>Extract first ALTLOC when duplicates exist</li> </ol> <pre><code>$ pdbtk extract --chains A --altloc first 1a02.pdb\n</code></pre> <ol> <li>Extract using --chain alias</li> </ol> <pre><code>$ pdbtk extract --chain A,B,C --output 1a02_chainABC.pdb 1a02.pdb\n</code></pre>"},{"location":"usage/#extract-seq-usage","title":"extract-seq Usage","text":"<pre><code>Extract sequences from chains in a PDB structure file.\nThe output is in FASTA format with sequence IDs in the format: &gt;{pdbfilename_no_dotpdb}_{chain}\n\nIf no chains are specified, all chains will be extracted.\nIf no input file is specified, reads from stdin.\n\nUsage:\n  pdbtk extract-seq [flags] [input_file]\n\nFlags:\n  -c, --chains string   Comma-separated list of chain IDs to extract (default: all chains)\n      --chain string    Alias for --chains\n  -h, --help            help for extract-seq\n  -o, --output string   Output file (default: stdout)\n      --seqres          Use SEQRES records instead of ATOM records\n</code></pre>"},{"location":"usage/#examples_2","title":"Examples","text":"<ol> <li>Extract sequences from all chains</li> </ol> <pre><code>$ pdbtk extract-seq 1a02.pdb &gt;1a02.fasta\n</code></pre> <ol> <li>Extract sequences from specific chains A, B, and C</li> </ol> <pre><code>$ pdbtk extract-seq --chains A,B,C 1a02.pdb &gt;1a02_chainABC.fasta\n</code></pre> <ol> <li>Extract all chains to a file</li> </ol> <pre><code>$ pdbtk extract-seq --output 1a02_all.fasta 1a02.pdb\n</code></pre> <ol> <li>Extract from stdin</li> </ol> <pre><code>$ cat 1a02.pdb | pdbtk extract-seq --chains B,C\n</code></pre> <ol> <li>Extract sequences using SEQRES records</li> </ol> <pre><code>$ pdbtk extract-seq --seqres 1a02.pdb\n</code></pre> <ol> <li>Extract sequences using --chain alias</li> </ol> <pre><code>$ pdbtk extract-seq --chain A,B 1a02.pdb &gt; 1a02_chainAB.fasta\n</code></pre> <ol> <li>Extract sequences from multiple PDB files in the current directory</li> </ol> <pre><code>$ find . -name \"*.pdb\" -exec pdbtk extract-seq {} \\; &gt; myseqs.fasta\n</code></pre> <p>Note on sequence extraction: - By default, <code>extract-seq</code> extracts sequences from ATOM records with gap characters (<code>-</code>) inserted for missing residue numbers. - Use <code>--seqres</code> to extract from SEQRES records instead (which contain the full sequence including regions not present in ATOM records). - If <code>--seqres</code> is specified but no SEQRES records are present, a warning is printed and no sequence is returned.</p>"},{"location":"usage/#version-usage","title":"version Usage","text":"<pre><code>Print the version number of pdbtk.\n\nUsage:\n  pdbtk version [flags]\n\nFlags:\n  -h, --help   help for version\n</code></pre>"},{"location":"usage/#examples_3","title":"Examples","text":"<p>Print the current version</p> <pre><code>$ pdbtk version\n0.1.1\n</code></pre>"},{"location":"usage/#completion-usage","title":"completion Usage","text":"<pre><code>Generate the autocompletion script for the specified shell\n\nUsage:\n  pdbtk completion [command]\n\nAvailable Commands:\n  bash        Generate the autocompletion script for bash\n  fish        Generate the autocompletion script for fish\n  powershell  Generate the autocompletion script for powershell\n  zsh         Generate the autocompletion script for zsh\n\nFlags:\n  -h, --help   help for completion\n\nUse \"pdbtk completion [command] --help\" for more information about a command.\n</code></pre> <p>See download.md for more details.</p>"},{"location":"usage/#rename-chain-usage","title":"rename-chain Usage","text":"<pre><code>Rename a chain in a PDB structure file.\nThe chain ID must be a single character. The new chain ID must also be a single character.\nIf the specified chain does not exist, the command will exit with an error.\nIf the new chain ID already exists, a warning will be logged but the operation will continue.\n\nUsage:\n  pdbtk rename-chain [flags] &lt;chain_id&gt; [input_file]\n\nFlags:\n  -h, --help            help for rename-chain\n  -o, --output string   Output file (default: stdout)\n  -t, --to string       New chain ID (required)\n</code></pre>"},{"location":"usage/#examples_4","title":"Examples","text":"<ol> <li>Rename chain A to B</li> </ol> <pre><code>$ pdbtk rename-chain A --to B 1a02.pdb\n</code></pre> <ol> <li>Rename chain A to B and output to a file</li> </ol> <pre><code>$ pdbtk rename-chain A --to B --output 1a02_renamed.pdb 1a02.pdb\n</code></pre> <ol> <li>Rename chain A to B from stdin</li> </ol> <pre><code>$ cat 1a02.pdb | pdbtk rename-chain A --to B\n</code></pre>"},{"location":"usage/#renumber-residues-usage","title":"renumber-residues Usage","text":"<pre><code>Renumber residues in a PDB structure file starting from a specified number.\nBy default, this preserves gaps in the residue sequence but offsets the numbering.\nUse --force-sequential to make all residues sequential without gaps.\nUse --exclude-zero to skip residue number zero when using negative start values.\n\nUsage:\n  pdbtk renumber-residues [flags] [input_file]\n\nFlags:\n  -s, --start int          Starting residue number (can be negative) (default 1)\n  -c, --chain string       Chain ID to renumber (default: all chains)\n  -z, --exclude-zero       Skip residue number zero when using negative start values\n  -f, --force-sequential   Force sequential numbering without gaps\n  -h, --help               help for renumber-residues\n  -o, --output string      Output file (default: stdout)\n</code></pre>"},{"location":"usage/#examples_5","title":"Examples","text":"<ol> <li>Renumber all residues starting from 1</li> </ol> <pre><code>$ pdbtk renumber-residues --start 1 1a02.pdb\n</code></pre> <ol> <li>Renumber residues in chain A starting from 1</li> </ol> <pre><code>$ pdbtk renumber-residues --start 1 --chain A 1a02.pdb\n</code></pre> <ol> <li>Force sequential numbering starting from 1</li> </ol> <pre><code>$ pdbtk renumber-residues --start 1 --force-sequential 1a02.pdb\n</code></pre> <ol> <li>Renumber starting from negative number</li> </ol> <pre><code>$ pdbtk renumber-residues --start -10 1a02.pdb\n</code></pre> <ol> <li>Renumber starting from -1, skipping zero (goes -1, 1, 2, 3...)</li> </ol> <pre><code>$ pdbtk renumber-residues --start -1 --exclude-zero 1a02.pdb\n</code></pre> <ol> <li>Renumber and output to a file</li> </ol> <pre><code>$ pdbtk renumber-residues --start 1 --output 1a02_renumbered.pdb 1a02.pdb\n</code></pre>"}]}