package tests

import (
	"os"
	"os/exec"
	"strings"
	"testing"

	"github.com/perry/pdbtk/pdbtk/cmd"
)

func TestExtractCommand(t *testing.T) {
	// Create a temporary test PDB file
	testPDB := `HEADER    TEST STRUCTURE                                   01-JAN-01   TEST
ATOM      1  N   ALA A   1      20.154  16.967  23.862  1.00 11.18           N
ATOM      2  CA  ALA A   1      19.030  16.206  23.362  1.00 10.53           C
ATOM      3  C   ALA A   1      17.680  16.889  23.362  1.00 10.53           C
ATOM      4  O   ALA A   1      17.680  18.089  23.362  1.00 10.53           O
ATOM      5  N   VAL B   1      30.154  26.967  33.862  1.00 11.18           N
ATOM      6  CA  VAL B   1      29.030  26.206  33.362  1.00 10.53           C
ATOM      7  C   VAL B   1      27.680  26.889  33.362  1.00 10.53           C
ATOM      8  O   VAL B   1      27.680  28.089  33.362  1.00 10.53           O
END`

	// Write test file
	err := os.WriteFile("test.pdb", []byte(testPDB), 0644)
	if err != nil {
		t.Fatalf("Failed to create test file: %v", err)
	}
	defer os.Remove("test.pdb")

	// Test file existence check
	err = cmd.CheckFileExists("test.pdb")
	if err != nil {
		t.Errorf("checkFileExists failed for existing file: %v", err)
	}

	err = cmd.CheckFileExists("nonexistent.pdb")
	if err == nil {
		t.Error("checkFileExists should fail for nonexistent file")
	}
}

func TestExtractCommandOutput(t *testing.T) {
	// Create a temporary test PDB file with multiple chains
	testPDB := `HEADER    TEST STRUCTURE                                   01-JAN-01   TEST
ATOM      1  N   ALA A   1      20.154  16.967  23.862  1.00 11.18           N
ATOM      2  CA  ALA A   1      19.030  16.206  23.362  1.00 10.53           C
ATOM      3  C   ALA A   1      17.680  16.889  23.362  1.00 10.53           C
ATOM      4  O   ALA A   1      17.680  18.089  23.362  1.00 10.53           O
ATOM      5  N   VAL B   1      30.154  26.967  33.862  1.00 11.18           N
ATOM      6  CA  VAL B   1      29.030  26.206  33.362  1.00 10.53           C
ATOM      7  C   VAL B   1      27.680  26.889  33.362  1.00 10.53           C
ATOM      8  O   VAL B   1      27.680  28.089  33.362  1.00 10.53           O
END`

	// Write test file
	err := os.WriteFile("test_extract.pdb", []byte(testPDB), 0644)
	if err != nil {
		t.Fatalf("Failed to create test file: %v", err)
	}
	defer os.Remove("test_extract.pdb")

	// Test extracting chain A
	cmd := exec.Command("../bin/pdbtk", "extract", "--chains", "A", "test_extract.pdb")
	output, err := cmd.Output()
	if err != nil {
		t.Fatalf("Failed to run extract command: %v", err)
	}

	outputStr := string(output)
	lines := strings.Split(outputStr, "\n")

	// Check that we have a proper header
	if !strings.Contains(outputStr, "HEADER") {
		t.Error("Output should contain HEADER line")
	}

	// Check that we have REMARK lines
	if !strings.Contains(outputStr, "REMARK   1 GENERATED BY PDBTK") {
		t.Error("Output should contain REMARK line")
	}

	// Check that we have ATOM lines
	atomLines := 0
	hasNonZeroCoords := false
	for _, line := range lines {
		if strings.HasPrefix(line, "ATOM") {
			atomLines++
			// Check that coordinates are not all zeros
			if strings.Contains(line, "20.154") || strings.Contains(line, "19.030") || strings.Contains(line, "17.680") {
				hasNonZeroCoords = true
			}
			// Check that we only have chain A atoms
			if strings.Contains(line, " A ") {
				// This is expected
			} else if strings.Contains(line, " B ") {
				t.Error("Chain A extraction should not contain chain B atoms")
			}
		}
	}

	if atomLines == 0 {
		t.Error("Output should contain ATOM lines")
	}

	if !hasNonZeroCoords {
		t.Error("Output should contain atoms with non-zero coordinates")
	}

	// Test extracting chain B
	cmd = exec.Command("../bin/pdbtk", "extract", "--chains", "B", "test_extract.pdb")
	output, err = cmd.Output()
	if err != nil {
		t.Fatalf("Failed to run extract command for chain B: %v", err)
	}

	outputStr = string(output)
	lines = strings.Split(outputStr, "\n")

	// Check that we have ATOM lines for chain B
	hasChainBAtoms := false
	for _, line := range lines {
		if strings.HasPrefix(line, "ATOM") && strings.Contains(line, " B ") {
			hasChainBAtoms = true
			// Check that coordinates are not all zeros
			if strings.Contains(line, "30.154") || strings.Contains(line, "29.030") || strings.Contains(line, "27.680") {
				// This is expected
			}
		}
	}

	if !hasChainBAtoms {
		t.Error("Chain B extraction should contain chain B atoms")
	}
}
